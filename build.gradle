plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id "org.springframework.cloud.contract" version "2.2.2.RELEASE"
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "org.asciidoctor.jvm.convert" version "3.1.0"
    id "com.avast.gradle.docker-compose" version "0.10.9"
    id 'java'
    id 'idea'
    id 'eclipse-wtp'
}

group = 'org.woehlke.bloodmoney'
version = '1.3-SNAPSHOT'
sourceCompatibility = '13'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springBootAdminVersion', "2.2.1")
    set('springCloudVersion', "Hoxton.SR1")
    set('vaadinVersion', "14.1.17")
    set('failOnNoContracts','false')
    set('bootswatchVersion','4.2.1')
    set('thymeleafSpringDataDialectversion','3.4.1')
    set('jsoupVersion','1.13.1')
    set('opencsvVersion','5.1')
    set('webjarsJqueryVersion','3.4.1')
    set('webjarsPopperJsVersion','1.16.0')
    set('webjarsBootstrap','4.4.1')
    set('webjarsFontAwesomeVersion','5.12.0')
    set('githubComSilktideCookieconsent2Version','3.1.0')
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation 'org.apache.camel.springboot:camel-spring-boot-starter:3.0.1'
    //implementation 'org.springframework.boot:spring-boot-starter-integration'
    //implementation 'org.springframework.boot:spring-boot-starter-amqp'
    //implementation 'org.springframework.boot:spring-boot-starter-artemis'
    //implementation 'org.springframework.boot:spring-boot-starter-batch'
    //implementation 'org.springframework.boot:spring-boot-starter-quartz'
    //implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-mail'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation 'com.vaadin:vaadin-spring-boot-starter'
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'de.codecentric:spring-boot-admin-starter-server'
    implementation 'org.flywaydb:flyway-core'
    implementation "org.jsoup:jsoup:${jsoupVersion}"
    implementation "com.opencsv:opencsv:${opencsvVersion}"
    implementation "org.webjars:jquery:${webjarsJqueryVersion}"
    implementation "org.webjars:popper.js:${webjarsPopperJsVersion}"
    implementation "org.webjars:bootstrap:${webjarsBootstrap}"
    implementation "org.webjars:font-awesome:${webjarsFontAwesomeVersion}"
    implementation "org.webjars.bower:github-com-silktide-cookieconsent2:${githubComSilktideCookieconsent2Version}"
    implementation "org.webjars:bootswatch-sandstone:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cyborg:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cerulean:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-slate:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cosmo:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cosmo:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-darkly:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-flatly:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-spacelab:${bootswatchVersion}"
    //implementation 'org.liquibase:liquibase-core'
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.thymeleaf:thymeleaf-spring5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time'
    implementation 'com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute'
    implementation "io.github.jpenren:thymeleaf-spring-data-dialect:${thymeleafSpringDataDialectversion}"
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'org.postgresql:postgresql'
    compileOnly 'org.projectlombok:lombok'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.amqp:spring-rabbit-test'
    testImplementation 'org.springframework.batch:spring-batch-test'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-stub-runner'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'org.springframework.integration:spring-integration-test'
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

contracts {
    testFramework = org.springframework.cloud.contract.verifier.config.TestFramework.JUNIT5
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

task bootRunDefault {
    bootRun.configure {
        systemProperty "spring.profiles.active", 'default'
    }
}

task bootRunHeroku {
    bootRun.configure {
        systemProperty "spring.profiles.active", 'heroku'
    }
}

bootRunDefault.finalizedBy bootRun
bootRunHeroku.finalizedBy bootRun

dockerCompose {
    //isRequiredBy(project.tasks.test)
    //exposeAsSystemProperties(project.tasks.test)
    useComposeFiles = ['src/test/docker/stack.yml']
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

