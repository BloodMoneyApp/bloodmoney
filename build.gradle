plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id 'java'
    //Lombok
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    //DatabaseSchemaEvolution
    id "org.flywaydb.flyway" version "6.3.0"
    id "org.liquibase.gradle" version "2.0.2"
    //Docker
    id "com.avast.gradle.docker-compose" version '0.10.9'
}

group = 'org.woehlke.bloodmoney'
//version = '1.9'
version = '1.9-SNAPSHOT'
sourceCompatibility = '13'

//SpringBootAdmin
def springBootAdminVersion = '2.2.1'

//FrontendHtml5
def bootswatchVersion = '4.2.1'
def thymeleafSpringDataDialectversion = '3.4.1'
def jsoupVersion = '1.13.1'
def opencsvVersion = '5.1'
def webjarsJqueryVersion = '3.4.1'
def webjarsPopperJsVersion = '1.16.0'
def webjarsBootstrap = '4.4.1'
def webjarsFontAwesomeVersion = '5.12.0'

//DatabaseSchemaEvolution
def liquibaseCoreVersion = '3.8.1'
def liquibaseGroovyDslVersion = '2.0.1'

def BLOODMONEY_DS_DB = 'bloodmoney'
def BLOODMONEY_DS_USR = 'bloodmoney'
def BLOODMONEY_DS_PWD = 'bloodmoneypwd'
def BLOODMONEY_DS_HOST = 'localhost'
def BLOODMONEY_DS_PORT = '5432'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springBootAdminVersion', "${springBootAdminVersion}")
}

test {
    String activeProfile =  System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    outputs.dir snippetsDir
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}

bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    String jmxEnabled = System.properties['spring.jmx.enabled']
    systemProperty "spring.jmx.enabled", jmxEnabled
}

dockerCompose {
    isRequiredBy(project.tasks.bootRun)
    isRequiredBy(project.tasks.test)
    useComposeFiles = ['stack.yml']
}

wrapper {
    gradleVersion = '6.2.2'
    distributionType = Wrapper.DistributionType.ALL
}

flywayMigrate {
    url = "jdbc:postgresql://${BLOODMONEY_DS_HOST}:${BLOODMONEY_DS_PORT}/${BLOODMONEY_DS_DB}"
    user = "${BLOODMONEY_DS_USR}"
    password = "${BLOODMONEY_DS_PWD}"
}

dependencyManagement {
    imports {
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

dependencies {

    //Disabled Features
    //implementation 'org.springframework.boot:spring-boot-starter-batch'
    //testImplementation 'org.springframework.batch:spring-batch-test'
    //implementation 'org.springframework.boot:spring-boot-starter-quartz'
    //implementation 'org.springframework.boot:spring-boot-starter-mail'
    //implementation 'org.springframework.boot:spring-boot-starter-cache'

    //SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    compileOnly 'org.projectlombok:lombok'

    //SpringBootAdmin
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'de.codecentric:spring-boot-admin-starter-server'

    //FrontendHtml5
    compile 'org.webjars:bootstrap:4.4.1-1'
    compile 'org.webjars:jquery:3.4.1'
    compile 'org.webjars:popper.js:2.0.2'
    compile 'org.webjars:font-awesome:5.12.0'

   // implementation "org.webjars:jquery:${webjarsJqueryVersion}"
   // implementation "org.webjars:popper.js:${webjarsPopperJsVersion}"
    //implementation "org.webjars:bootstrap:${webjarsBootstrap}"
    //implementation "org.webjars:font-awesome:${webjarsFontAwesomeVersion}"

    //SpringMVC
    implementation 'org.thymeleaf:thymeleaf-spring5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time'
    implementation 'com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute'
    implementation "io.github.jpenren:thymeleaf-spring-data-dialect:${thymeleafSpringDataDialectversion}"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-logging'

    //Webservices
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation "com.opencsv:opencsv:${opencsvVersion}"
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    //implementation 'wsdl4j:wsdl4j:1.6.1'
    //implementation 'org.glassfish.jersey.containers:jersey-container-servlet'
    //implementation 'org.glassfish.jersey.media:jersey-media-json-jackson'

    //DatabaseSchemaEvolution
    implementation "org.jsoup:jsoup:${jsoupVersion}"
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    implementation 'org.postgresql:postgresql'
    liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:${liquibaseGroovyDslVersion}"
    liquibaseRuntime 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'

    //Security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //Testing
    testCompile 'org.junit.jupiter:junit-jupiter-engine'
    testCompile 'org.mockito:mockito-junit-jupiter'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'
}
