buildscript {
    dependencies {
        classpath 'com.h2database:h2:1.4.197'
    }
}

plugins {
    id 'org.springframework.boot' version '2.2.5.RELEASE'
    id "org.springframework.cloud.contract" version  '2.2.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.9.RELEASE'
    id "org.asciidoctor.jvm.convert" version '3.1.0'
    //Lombok
    id "io.franzbecker.gradle-lombok" version "3.3.0"
    //DatabaseSchemaEvolution
    id "org.flywaydb.flyway" version "6.3.0"
    id "org.liquibase.gradle" version "2.0.2"
    //DevOps
    id "com.avast.gradle.docker-compose" version '0.10.9'
    id 'java'
    id 'java-library'
    id 'idea'
    id 'eclipse-wtp'
}

group = 'org.woehlke.bloodmoney'
version = '1.5-SNAPSHOT'
sourceCompatibility = '13'

//SpringBootAdmin
def springBootAdminVersion = '2.2.1'

//FrontendHtml5
def bootswatchVersion = '4.2.1'
def thymeleafSpringDataDialectversion = '3.4.1'
def jsoupVersion = '1.13.1'
def opencsvVersion = '5.1'
def webjarsJqueryVersion = '3.4.1'
def webjarsPopperJsVersion = '1.16.0'
def webjarsBootstrap = '4.4.1'
def webjarsFontAwesomeVersion = '5.12.0'

//DatabaseSchemaEvolution
def liquibaseCoreVersion = '3.8.1'
def liquibaseGroovyDslVersion = '2.0.1'

configurations {
    developmentOnly
    runtimeClasspath {
        extendsFrom developmentOnly
    }
    compileOnly {
        extendsFrom annotationProcessor
    }
    testCompile {
        extendsFrom annotationProcessor
    }
    testImplementation {
        extendsFrom implementation
    }
    //jaxb
}

repositories {
    mavenCentral()
    jcenter()
}

ext {
    set('snippetsDir', file("build/generated-snippets"))
    set('springBootAdminVersion', "${springBootAdminVersion}")
}

asciidoctor {
    inputs.dir snippetsDir
    dependsOn test
}

//Testing
test {
    String activeProfile =  System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    outputs.dir snippetsDir
    useJUnitPlatform()
}

springBoot {
    buildInfo()
}


//Testing
task bootRunDefault {
    bootRun.configure {
        String activeProfile = 'default'
        systemProperty "spring.profiles.active", activeProfile
    }
}

task testDefault {
    test.configure {
        String activeProfile = 'default'
        systemProperty "spring.profiles.active", activeProfile
    }
}

task testDev {
    test.configure {
        String activeProfile = 'dev'
        String jmxEnabled ='true'
        systemProperty "spring.profiles.active", activeProfile
        systemProperty "spring.jmx.enabled", jmxEnabled
    }
}

//Testing
task bootRunDev {
    bootRun.configure {
        String activeProfile = 'dev'
        String jmxEnabled ='true'
        systemProperty "spring.profiles.active", activeProfile
        systemProperty "spring.jmx.enabled", jmxEnabled
    }
}

bootRun {
    String activeProfile = System.properties['spring.profiles.active']
    systemProperty "spring.profiles.active", activeProfile
    String jmxEnabled = System.properties['spring.jmx.enabled']
    systemProperty "spring.jmx.enabled", jmxEnabled
    //String confLoc = System.properties['spring.config.location']
    //systemProperty "spring.config.location", "file:$confLoc"
}

bootRunDefault.finalizedBy bootRun
bootRunDev.finalizedBy bootRun

//DevOps
dockerCompose {
    isRequiredBy(project.tasks.bootRunDefault)
    isRequiredBy(project.tasks.testDefault)
    //exposeAsSystemProperties(project.tasks.bootRunDefault)
    useComposeFiles = ['docker-compose.yml']
}

//DevOps
wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

flywayMigrate {
    url = 'jdbc:h2:mem:testdb;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=FALSE'
    user = 'sa'
}

dependencyManagement {
    imports {
        //SpringBootAdmin
        mavenBom "de.codecentric:spring-boot-admin-dependencies:${springBootAdminVersion}"
    }
}

dependencies {

    //Disabled Features
    //implementation 'org.springframework.boot:spring-boot-starter-batch'
    //testImplementation 'org.springframework.batch:spring-batch-test'
    //implementation 'org.springframework.boot:spring-boot-starter-quartz'
    //implementation 'org.springframework.boot:spring-boot-starter-mail'
    //implementation 'org.springframework.boot:spring-boot-starter-cache'

    //SpringBoot
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    annotationProcessor 'org.projectlombok:lombok'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    //compileOnly 'org.projectlombok:lombok'

    //SpringBootAdmin
    implementation 'de.codecentric:spring-boot-admin-starter-client'
    implementation 'de.codecentric:spring-boot-admin-starter-server'

    //FrontendHtml5
    implementation "org.webjars:jquery:${webjarsJqueryVersion}"
    implementation "org.webjars:popper.js:${webjarsPopperJsVersion}"
    implementation "org.webjars:bootstrap:${webjarsBootstrap}"
    implementation "org.webjars:font-awesome:${webjarsFontAwesomeVersion}"
    implementation "org.webjars:bootswatch-sandstone:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cyborg:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cerulean:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-slate:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cosmo:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-cosmo:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-darkly:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-flatly:${bootswatchVersion}"
    implementation "org.webjars:bootswatch-spacelab:${bootswatchVersion}"

    //SpringMVC
    implementation 'org.thymeleaf:thymeleaf-spring5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-springsecurity5'
    implementation 'org.thymeleaf.extras:thymeleaf-extras-java8time'
    implementation 'com.github.mxab.thymeleaf.extras:thymeleaf-extras-data-attribute'
    implementation "io.github.jpenren:thymeleaf-spring-data-dialect:${thymeleafSpringDataDialectversion}"
    implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
    implementation 'org.springframework.boot:spring-boot-starter-web'

    implementation 'org.springframework.boot:spring-boot-starter-logging'

    //Webservices
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation 'org.springframework.boot:spring-boot-starter-hateoas'
    implementation 'org.springframework.boot:spring-boot-starter-jersey'
    implementation 'org.springframework.boot:spring-boot-starter-web-services'
    implementation "com.opencsv:opencsv:${opencsvVersion}"
    implementation 'org.springframework.data:spring-data-rest-hal-explorer'
    implementation 'wsdl4j:wsdl4j:1.6.1'

    //DatabaseSchemaEvolution
    implementation "org.jsoup:jsoup:${jsoupVersion}"
    implementation 'org.springframework.session:spring-session-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-jdbc'
    runtimeOnly 'com.h2database:h2:1.4.197'
    runtimeOnly 'mysql:mysql-connector-java'
    runtimeOnly 'org.postgresql:postgresql'
    implementation 'org.flywaydb:flyway-core'
    liquibaseRuntime "org.liquibase:liquibase-core:${liquibaseCoreVersion}"
    liquibaseRuntime "org.liquibase:liquibase-groovy-dsl:${liquibaseGroovyDslVersion}"
    liquibaseRuntime 'org.postgresql:postgresql'

    //Security
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
    implementation 'org.springframework.boot:spring-boot-starter-oauth2-resource-server'
    implementation 'org.springframework.boot:spring-boot-starter-security'

    //Testing
    testCompile 'org.junit.jupiter:junit-jupiter-engine'
    testCompile 'org.mockito:mockito-junit-jupiter'
    testImplementation 'com.h2database:h2:1.4.197'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine'
    testImplementation 'org.mockito:mockito-junit-jupiter'
    testImplementation('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    testImplementation 'org.springframework.security:spring-security-test'

    //jaxb "org.glassfish.jaxb:jaxb-xjc:2.2.11"
    //compile(files(genJaxb.classesDir).builtBy(genJaxb))
}
